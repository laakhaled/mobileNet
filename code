pip install tensorflow
pip install Opencv-python
  import numpy as np
import os
import matplotlib.pyplot as plt
%matplotlib inline
import cv2
import tensorflow as tf
from tensorflow import keras
from keras.applications.mobilenet_v2 import MobileNetV2
from keras.layers import Dense, Activation
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing import image
from keras.models import Model
from keras.applications import imagenet_utils
from keras.applications import MobileNet
from keras.applications.mobilenet import preprocess_input
import itertools
train_path = r'C:\Users\Manga\Desktop\dataset3\dataset3\train'
test_path = r'C:\Users\Manga\Desktop\dataset3\dataset3\test'
valid_path = r'C:\Users\Manga\Desktop\dataset3\dataset3\validation'
train_batches = ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory(train_path , target_size=(224,224) , batch_size=10)
test_batches = ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory( test_path , target_size=(224,224) , batch_size=10 , shuffle=False)
valid_batches =ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory( valid_path , target_size=(224,224) , batch_size=10 )
num_classes = 37  # Adjust this based on the actual number of classes
mobile = keras.applications.mobilenet.MobileNet()
  mobile.summary()
  x=mobile.layers[-5].output
x = tf.keras.layers.Reshape(target_shape=(1024,))(x)
output = Dense(num_classes, activation='softmax')(x)
  model = Model(inputs=mobile.input, outputs=output)
for layer in model.layers[:-6]:
    layer.trainable = False
  model.summary()
  model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping
early_stopping_monitor = EarlyStopping(patience=2)
  model.fit(x=train_batches, validation_data=valid_batches, validation_split=0.3, epochs=30, callbacks=[early_stopping_monitor])
  test_labels=test_batches.classes
test_batches.class_indices
  my_model.save("my_modeltest2.h5", include_optimizer=True)
from keras.models import load_model

# Load your trained model
my_model = load_model("my_modeltest2.h5")
from keras.preprocessing import image
import numpy as np
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import MobileNet, imagenet_utils

# Load MobileNet model
my_model = load_model("my_modeltest2.h5")

# Define function to prepare image
def prepare_image(file):
    img = image.load_img(file, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    return tf.keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)

# Path to your image file
file_path = 'J:\\valid\\British_Shorthair\\British_Shorthair_130_jpg.rf.740277ec11f8207a8da1b56320659aa6.jpg'

# Display the image
from IPython.display import Image
Image(filename=file_path, width=450, height=300)

# Preprocess the image
preprocessed_image = prepare_image(file_path)

# Make predictions
predictions = my_model.predict(preprocessed_image)

# Decode predictions
results = imagenet_utils.decode_predictions(predictions)

# Display results
print(results)
